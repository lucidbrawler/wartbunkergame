---
const links = [
  { name: 'GET\u00A0\STARTED', href: '/get-started' },
  { name: 'NEWS', href: '/news' },
  { name: 'DOCS', href: 'https://docs.warthog.network/', target: '_blank' },
  { name: 'WHITEPAPER', href: '/whitepaper' },
  { name: 'FAQS', href: '/faqs' },
  { name: 'EXPLORER', href: 'https://wartscan.io/', target: '_blank' },
  { name: 'DEFI\u00A0\DEMO', href: '/defi-demo' },
];

const wallet = [{ name: 'WALLET', href: '/webwallet' }];

const publiNodes = [
  { name: 'Polaire', href: 'http://51.75.21.134:3001', id: 'myInput' },
  { name: 'Andrew', href: 'https://node.wartscan.io', id: 'myInput2' },
  { name: 'Pumbaa', href: 'http://65.87.7.86:3001', id: 'myInput3' },
  { name: 'Blu Asia', href: 'http://62.72.44.89:3001', id: 'myInput4' },
  { name: 'Blu Central Us', href: 'http://89.117.150.162:3001', id: 'myInput5' },
  { name: 'Blu E.U.', href: 'http://185.209.228.16:3001', id: 'myInput6' },
  { name: 'Johnnyb Us East', href: 'http://dev.node-s.com:3001', id: 'myInput7' },
];

const networks = [
  { imgSrc: 'github_gray.svg', href: 'https://github.com/warthog-network' },
  { imgSrc: 'discord_gray.svg', href: 'https://discord.com/invite/QMDV8bGTdQ' },
  { imgSrc: 'telegram_gray.svg', href: 'https://t.me/warthognetwork' },
  { imgSrc: 'twitter_gray.svg', href: 'https://x.com/warthognetwork' },
];
---

<script>
  // Single handler for all copy buttons
  function copyToClipboard(event) {
    const button = event.currentTarget;
    const inputId = button.dataset.inputId;
    const copyText = document.getElementById(inputId);

    if (copyText instanceof HTMLInputElement) {
      copyText.select();
      copyText.setSelectionRange(0, 99999);
      navigator.clipboard.writeText(copyText.value);
      alert("Copied the text: " + copyText.value);
    }
  }

  // Attach listeners to all copy buttons
  document.querySelectorAll('.copy-button').forEach(button => {
    button.addEventListener('click', copyToClipboard);
  });

  const closeMenu = document.querySelector('.close-menu');
  if (closeMenu) {
    closeMenu.addEventListener('click', () => {
      const mobileMenu = closeMenu.closest('.mobileMenu');
      if (mobileMenu) {
        mobileMenu.classList.remove('show');
      }
    });
  }

  // Dropdown toggle functionality
  function closeAllDropdowns() {
    document.querySelectorAll('.dropdown').forEach(dd => {
      dd.classList.remove('active');
    });
  }

  document.addEventListener('click', (e) => {
    if (!e.target.closest('.dropdown')) {
      closeAllDropdowns();
    }
  });

  document.querySelectorAll('.dropbtn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      const dropdown = btn.parentElement;
      const isActive = dropdown.classList.contains('active');
      closeAllDropdowns();
      if (!isActive) {
        dropdown.classList.add('active');
      }
    });
  });
</script>

<style>
  .menu{
       
          display: flex;
          align-items: center;
          height: 2.5rem;
      }

      .icon{
          height: 1.875rem;
          margin: 4px;
        }
        .menuspace{
         font-family: Montserrat;
        font-size: clamp(0.727rem, 1.079vw, 0.875rem);        
        font-weight: 400;
        line-height: 2.5rem;
        text-underline-position: from-font;
        text-decoration-skip-ink: none;
        }
      .menuItem {
        font-family: Montserrat;
        font-size: clamp(0.727rem, 1.079vw, 0.875rem);
        font-weight: 400;
        line-height: 1.067rem;
        text-underline-position: from-font;
        text-decoration-skip-ink: none;
      }
      .node{
        cursor: pointer;
        visibility: hidden;
      }
      .Nodes{
        margin-bottom: .75rem;
        padding-left:.5rem ;
        padding-right: 2rem;
        cursor: pointer;
      }
      .Nodes:hover ~ .node {
        visibility: visible;
      }
      .underlineText{
        position: relative;
        text-decoration: none;
      }
a{

  cursor: pointer;
}
label{
  cursor: pointer;
}
input{
  cursor: pointer;
}
.wallet{
  padding-left: .5rem;
  padding-bottom: .5rem;}
        .underlineText::after {
          content: '';
          position: absolute;
          width: 0;
          height: 1px;
          left: 0;
          bottom: 0;
          background: #FDB913;
          transition: width 0.3s ease;
        }

        .underlineText:hover::after {
          width: 100%;
        }

      @media screen and (min-width: 1024px) {
        .menu {
          
          min-width: 493px;
          margin-left: auto;
          margin-right: auto;
        }

        .menu a {
         
          display: inline-block;
          padding: .5rem;
        }

        .menu button {
          display: inline-block;
          padding: .5rem;
        }
      }

      @media screen and (min-width: 1100px) {
        .menu {
          margin-left: 2rem;
        }
      }

      /* Dropdown Button */
.dropbtn {
  background: transparent;
  color: inherit;
  padding: 0;
  font: inherit;
  border: none;
  cursor: pointer;
}

/* The container <div> - needed to position the dropdown content */
.dropdown { 
  font-family: Montserrat;
  font-size: clamp(0.727rem, 1.079vw, 0.875rem);
  font-weight: 400;
  line-height: 1.067rem;
  text-underline-position: from-font;
  text-decoration-skip-ink: none;
  padding-top: .8rem;
  z-index: 1000;
  position: relative;
  display: inline-block;
}

/* Dropdown Content (Hidden by Default) */

.dropdown-content {
  margin-bottom: 10rem;
  display: none;
  position: absolute;
  background-color: #2a2a2a;
  min-width: 300px;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.5);
  z-index: 1;
  border-radius: 4px;
  top: 100%;
  left: 50%;
  transform: translateX(-50%);
}
.ghost{
    display: none;
}
@media screen and (max-width: 1023px) {
  .dropdown-content {
    transform: translate(-50%, 0%);
    box-shadow: 0px -8px 16px 0px rgba(0,0,0,0.5);
    border-radius: 4px 4px 0 0;
  }
  .dropdown{
    display: none;
  }
  .ghost{
    display: block;
  }
}
/* Links inside the dropdown */
.dropdown-content a {
  color: rgb(255, 255, 255);
  padding: 12px 50px;
  text-decoration: none;
  display: block;
}
input {
  background: none;
  border: none;
}
/* Change color of dropdown links on hover */
.dropdown-content a:hover {background-color: rgb(245, 208, 0);}

/* Show the dropdown menu on active class */
.dropdown.active .dropdown-content {display: block;}

/* Change the background color of the dropdown button when the dropdown content is shown */
.dropdown.active .dropbtn {background-color: transparent;}
</style>

<div class='menu'>
  


  <div class="dropdown">
    <button class="menuItem Nodes underlineText dropbtn">PUBLIC NODES</button>
    <div class="dropdown-content menuItem">
      {publiNodes.map((node) => (
        <a class="copy-button" data-input-id={node.id}>
          <label>{node.name}</label>
          <input id={node.id} value={node.href} readonly />
        </a>
      ))}
    </div>
  </div>
</div>

<div class='lg:flex flex justify-center'>
  {networks.map((network) => (
    <a href={network.href}>
      <p><img class='icon' src={'/Images/' + network.imgSrc} alt="logo" /></p>
    </a>
  ))}
  
</div>
<div class="dropdown ghost menu">
    <button class="menuItem Nodes underlineText dropbtn">PUBLIC NODES</button>
    <div class="dropdown-content menuItem">
      {publiNodes.map((node) => (
        <a class="copy-button" data-input-id={node.id}>
          <label>{node.name}</label>
          <input id={node.id} value={node.href} readonly />
        </a>
      ))}
    </div>
  </div>